type Query {
    getAnalizedDataById(id: Int!): AnalizedData
    getUserById(id: Int!): User
    fetchCalibrationData(userId: ID!): CalibrationDataPayload!
    debugCalibrationData(userId: ID!): String!
}

type Mutation {
    addAnalizedData(userId: Int!, timestamp: Int!, accelerometer: IODataInput!, magnetometer: IODataInput!): AnalizedData
    addUser(name: String!,surname:String!, password: String!, email: String!): User
    login(email: String!, password: String!): LoginResponse
    refresh(refreshToken: String!): LoginResponse
    saveCalibrationData(input: SaveCalibrationDataInput): CalibrationDataPayload!
}

input IODataInput {
    x: Int!
    y: Int!
    z: Int!
}

type AnalizedData{
    userId: Int!
    timestamp: Int!
    accelerometer: IOData!
    magnetometer: IOData!
}

type IOData {
    x: Int!
    y: Int!
    z: Int!
}

type Session{
    accessToken: String!
    refreshToken: String!
}

type LoginResponse{
    token: String!
    refreshToken: String!
    userId: Int!
    calibrationData: CalibrationDataPayload
}

type User{
    id: Int!
    name: String!
    surname: String!
    email: String!

}

input CalibrationDataInput {
  accMatrix: [[Float]]!
  accInvertedMatrix: [[Float]]!
  accDeterminant: Float!
  accVMedia: [Float]
  accSigma: [Float]
  accThreshold: Float
  magMatrix: [[Float]]!
  magInvertedMatrix: [[Float]]!
  magDeterminant: Float!
  magVMedia: [Float]
  magSigma: [Float]
  magThreshold: Float
}

input SaveCalibrationDataInput {
  userId: ID!
  calibrationData: CalibrationDataInput!
}

type CalibrationDataPayload {
  id: ID!
  accMatrix: [[Float]]!
  accInvertedMatrix: [[Float]]!
  accDeterminant: Float!
  accVMedia: [Float]
  accSigma: [Float]
  accThreshold: Float
  magMatrix: [[Float]]!
  magInvertedMatrix: [[Float]]!
  magDeterminant: Float!
  magVMedia: [Float]
  magSigma: [Float]
  magThreshold: Float
}



